import argparse
import numpy as np
import math
from PIL import Image

def convert_to_img(filename, img_size, img_mode, output_filename=None):
    """
    Convert binary file to an image.

    Args:
        filename (str): Path to the binary file.
        img_size (int): Desired size (width and height) of the output image.
        img_mode (str): Image mode ("RGB" or "L").
        output_filename (str, optional): Path to save the output image. 
            If None, the image will be saved with a default name.

    Raises:
        ValueError: If the specified image mode is invalid.

    Returns:
        None
    """
    if img_mode not in ["RGB", "L"]:
        raise ValueError('Invalid image mode: {}'.format(img_mode))

    with open(filename, "rb") as f:
        data = np.frombuffer(f.read(), dtype=np.uint8)

    file_size = len(data)
    channels = 3 if img_mode == "RGB" else 1

    img_width = int(math.ceil(math.sqrt(math.ceil(float(file_size) / channels))))
    new_file_size = img_width * img_width * channels
    data = np.pad(data, (new_file_size - file_size, 0))

    result = np.zeros((img_width, img_width, channels), dtype=np.uint8)
    for row in range(img_width):
        for col in range(img_width):
            for ch in range(channels):
                result[row][col][ch] = data[row * (img_width * channels) + col * channels + ch]

    if img_mode == "L":
        result = result.reshape(result.shape[0], -1)
    img = Image.fromarray(result, img_mode)
    img = img.resize((int(img_size), int(img_size)), Image.LANCZOS)

    if output_filename is None:
        output_filename = f"{img_size}x{img_size}_{filename.split('/')[-1]}_{img_mode}.png"
    img.save(output_filename, format="PNG")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Convert binary file to an image.")
    parser.add_argument("filename", type=str, help="Path to the binary file.")
    parser.add_argument("--img-size", type=int, default=300, help="Desired size (width and height) of the output image.")
    parser.add_argument("--img-mode", type=str, default="RGB", choices=["RGB", "L"], help="Image mode ('RGB' or 'L').")
    parser.add_argument("--output-filename", type=str, default=None, help="Path to save the output image.")

    args = parser.parse_args()
    convert_to_img(args.filename, args.img_size, args.img_mode, args.output_filename)

